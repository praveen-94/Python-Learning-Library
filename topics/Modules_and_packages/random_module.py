# random_module_deep_dive.py

from helpers.display_utils import *
import random

def main():
    print_heading("The `random` Module: Pseudo-Random Numbers")
    imp_note_points("""
- The `random` module implements pseudo-random number generators for various distributions.
- "Pseudo-random" means the numbers appear random but are generated by a deterministic algorithm.
- This module should NOT be used for security or cryptographic purposes. For that, use the `secrets` module.
- It is incredibly useful for simulations, games, statistical sampling, and randomized algorithms.
""")

    # -----------------------------------------------------------------------------------------------------------------------------------------------
    # 1. Functions for Integers
    # -----------------------------------------------------------------------------------------------------------------------------------------------
    print_sub_heading("1. Functions for Integers")

    print_small_sub_heading("a) random.randint(a, b)", True)
    display_note("Returns a random integer N such that `a <= N <= b`. This range is inclusive on both ends.")
    random_int = random.randint(1, 10)
    show_code_with_output(f'''# Get a random integer in an inclusive range
import random
num = random.randint(1, 10)
print(f"Random number between 1 and 10 is: {{num}}") '''
,
f"Random number between 1 and 10 is: {random_int}")

    print_small_sub_heading("b) random.randrange(start, stop[, step])",True)
    display_note("Returns a randomly selected element from `range(start, stop, step)`. The `stop` value is exclusive.")
    random_even_num = random.randrange(0, 101, 2) # Random even number between 0 and 100
    show_code_with_output(f'''# Get a random number from a range (exclusive stop)
import random
# Get a random even number between 0 and 100 
even_num = random.randrange(0, 101, 2)
print(f"Random even number: {{even_num}}")'''
,
f"Random even number: {random_even_num}")


    # -----------------------------------------------------------------------------------------------------------------------------------------------
    # 2. Functions for Sequences
    # -----------------------------------------------------------------------------------------------------------------------------------------------
    print_sub_heading("2. Functions for Sequences")
    display_note("These functions allow you to make random selections from lists, tuples, or other sequence types.")
    options = ['rock', 'paper', 'scissors', 'lizard', 'spock']

    print_small_sub_heading("a) random.choice(seq)",True)
    display_note("Returns a single random element from a non-empty sequence.")
    choice = random.choice(options)
    show_code_with_output(f'''# Pick one random item from a list
import random
options = {options}
move = random.choice(options)
print(f"Player chose: {{move}}") '''
,
f"Player chose: {choice}")

    print_small_sub_heading("b) random.sample(population, k)",True)
    display_note("Returns a list of `k` unique elements chosen from the population sequence. Used for random sampling without replacement.", "tip")
    sample = random.sample(options, 3)
    show_code_with_output(f'''# Pick a unique sample of 3 items
import random
options = {options}
sample = random.sample(options, 3)
print(f"A sample of 3 unique items: {{sample}}") '''
,
f"A sample of 3 unique items: {sample}")

    print_small_sub_heading("c) random.shuffle(x)",True)
    display_note("Shuffles the sequence `x` in place. This means it modifies the original list and returns `None`.", "warning")
    deck = ['Ace', 'King', 'Queen', 'Jack']
    shuffled_deck_code = f'''# Shuffle a list in-place
import random
deck = {deck}
print(f"Original deck: {{deck}}")
random.shuffle(deck) # This modifies the list 
print(f"Shuffled deck: {{deck}}")'''
    
    # Execute the shuffle logic to get the output
    temp_deck = list(deck) # Make a copy to shuffle
    random.shuffle(temp_deck)
    shuffled_deck_output = f"Original deck: {deck}\nShuffled deck: {temp_deck}"
    
    show_code_with_output(shuffled_deck_code, shuffled_deck_output)

    # -----------------------------------------------------------------------------------------------------------------------------------------------
    # 3. Functions for Floating-Point Numbers
    # -----------------------------------------------------------------------------------------------------------------------------------------------
    print_sub_heading("3. Functions for Floating-Point Numbers")
    
    print_small_sub_heading("a) random.random()",True)
    display_note("Returns the next random floating point number in the range [0.0, 1.0). The endpoint 1.0 is exclusive.")
    rand_float = random.random()
    show_code_with_output(f'''# Generate a random float between 0.0 and 1.0
import random
val = random.random()
print(f"Random float: {{val}}") '''
,
f"Random float: {rand_float}")

    print_small_sub_heading("b) random.uniform(a, b)",True)
    display_note("Returns a random floating point number N such that `a <= N <= b` or `b <= N <= a`.")
    rand_uniform = random.uniform(5.5, 99.5)
    show_code_with_output(f'''# Generate a random float within a specific range
import random
score = random.uniform(5.5, 99.5)
print(f"Random score: {{score}}")'''
,
f"Random score: {rand_uniform}")

    # -----------------------------------------------------------------------------------------------------------------------------------------------
    # 4. Reproducibility with Seeding
    # -----------------------------------------------------------------------------------------------------------------------------------------------
    print_sub_heading("4. Reproducibility with Seeding")
    display_note("The pseudo-random generator can be initialized with a 'seed' value. ")
    display_note("Using the same seed will produce the exact same sequence of 'random' numbers every time.")
    display_note("This is extremely useful for debugging, testing, and creating reproducible simulations.", "example")
    
    # --- Logic for the output ---
    random.seed(42)
    output1 = random.randint(1, 100)
    output2 = random.randint(1, 100)
    
    random.seed(42) # Reset the seed
    output3 = random.randint(1, 100)
    output4 = random.randint(1, 100)

    final_output = f"First run with seed 42: {[output1, output2]}\nSecond run with seed 42: {[output3, output4]}"
    # --- End of logic ---
    
    show_code_with_output(f'''# Demonstrating the effect of random.seed()
import random

# Set a seed to get a predictable sequence
random.seed(42)
print(f"First run with seed 42: {{[random.randint(1, 100), random.randint(1, 100)]}}")  

# If we reset with the same seed, we get the same sequence
random.seed(42)
print(f"Second run with seed 42: {{[random.randint(1, 100), random.randint(1, 100)]}}")'''
, 
final_output)


if __name__ == "__main__":
    main()
